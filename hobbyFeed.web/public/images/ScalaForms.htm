<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0057)http://www.playframework.com/documentation/2.0/ScalaForms -->
<!DOCTYPE html PUBLIC "" ""><HTML><HEAD><META content="IE=10.000" 
http-equiv="X-UA-Compatible">
         
<META charset="utf-8">         
<META http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">         
<TITLE>ScalaForms</TITLE>         
<META name="description" content="">         
<META name="viewport" content="width=device-width,maximum-scale=1.0;">         
<LINK href="ScalaForms_files/css.css" rel="stylesheet" type="text/css">         
<LINK href="ScalaForms_files/css(1).css" rel="stylesheet" type="text/css">       
  <LINK href="ScalaForms_files/main.css" rel="stylesheet">         <LINK href="/assets/images/favicon.png" 
rel="icon" type="image/png">         <!--[if lt IE 9]>
        <script src="/assets/javascripts/vendor/html5shiv.js"></script>
        <![endif]--> 
        
<SCRIPT src="ScalaForms_files/jquery-1.8.2.min.js"></SCRIPT>
         
<SCRIPT src="ScalaForms_files/main.js"></SCRIPT>
     
<META name="GENERATOR" content="MSHTML 10.00.9200.16660"></HEAD>     
<BODY class="documentation"><!--[if lt IE 7]>
            <p class="outdated">You are using an outdated browser. <a href="http://browsehappy.com/">Upgrade your browser today</a> or <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to better experience this site.</p>
        <![endif]--> 
        <HEADER id="navigation">
<DIV class="wrapper"><A id="logo" 
href="http://www.playframework.com/">Typesafe</A><NAV id="sections"><A href="http://www.playframework.com/download">Download</A><A 
href="http://www.playframework.com/documentation">Documentation</A><A href="http://www.playframework.com/get-involved">Get 
Involved</A></NAV><NAV id="social"><A href="http://groups.google.com/forum/#!forum/play-framework"><SPAN>Mailing 
list</SPAN></A>                     <A 
href="http://twitter.com/playframework"><SPAN>Twitter</SPAN></A>                 
    <A 
href="http://plus.google.com/106233335814246022600"><SPAN>Google+</SPAN></A>     
                <A href="http://www.facebook.com/pages/Play-Framework/50884087887"><SPAN>Facebook</SPAN></A> 
                    <A 
href="http://github.com/playframework/play20"><SPAN>Github</SPAN></A>            
         <A 
href="http://stackoverflow.com/questions/tagged/playframework"><SPAN>Stackoverflow</SPAN></A> 
                </NAV></DIV></HEADER>
<DIV id="getLogo">
<DIV class="pan"><Q>Is that what you're looking for?</Q><FIGURE><IMG src="ScalaForms_files/normal-mini.png"> 
                     <FIGCAPTION><A href="http://www.playframework.com/assets/images/logos/normal.png">(png)</A> 
                        <A href="http://www.playframework.com/assets/images/logos/normal.svg">(svg)</A> 
                     </FIGCAPTION></FIGURE><FIGURE><IMG src="ScalaForms_files/black-mini.png"> 
                     <FIGCAPTION><A href="http://www.playframework.com/assets/images/logos/black.png">(png)</A> 
                        <A href="http://www.playframework.com/assets/images/logos/black.svg">(svg)</A> 
                     </FIGCAPTION></FIGURE></DIV></DIV><HEADER id="top">
<DIV class="wrapper">
<H1>Documentation</H1></DIV></HEADER><SECTION id="content"><BUTTON 
id="extend">extend</BUTTON>         <NAV id="toolbar">
<H3>Browse versions</H3>
<DIV class="switch"><A 
href="http://www.playframework.com/documentation/2.0">2.0</A>                 
<DL class="dropdown">
  <DT>▾</DT>
  <DD><A 
  href="http://www.playframework.com/documentation/2.3.0-SNAPSHOT">2.3.0-SNAPSHOT</A><A 
  href="http://www.playframework.com/documentation/2.2.x">2.2.x</A><A href="http://www.playframework.com/documentation/2.2.0">2.2.0</A><A 
  href="http://www.playframework.com/documentation/2.1.x">2.1.x</A><A href="http://www.playframework.com/documentation/2.0.x">2.0.x</A><A 
  href="http://www.playframework.com/documentation/1.2.7">1.2.7</A><A href="http://www.playframework.com/documentation/1.1.1">1.1.1</A><A 
  href="http://www.playframework.com/documentation/1.0.3.2">1.0.3.2</A></DD></DL></DIV>
<H3>Browse APIs</H3>
<DIV class="switch"><A href="http://www.playframework.com/documentation/2.0/api/scala/index.html">Scala</A> 
                            <A href="http://www.playframework.com/documentation/2.0/api/java/index.html">Java</A> 
                        </DIV></NAV><ARTICLE>
<H1>Handling form submission</H1>
<H2>Defining a form</H2>
<P>The <CODE>play.api.data</CODE> package contains several helpers to handle 
HTTP form data submission and validation. The easiest way to handle a form 
submission is to define a <CODE>play.api.data.Form</CODE> structure:</P>
<PRE><CODE class="scala">import play.api.data._
import play.api.data.Forms._

val loginForm = Form(
  tuple(
    "email" -&gt; text,
    "password" -&gt; text
  )
)
</CODE></PRE>
<P>This form can generate a <CODE>(String, String)</CODE> result value from 
<CODE>Map[String,String]</CODE> data:</P>
<PRE><CODE class="scala">val anyData = Map("email" -&gt; "bob@gmail.com", "password" -&gt; "secret")
val (user, password) = loginForm.bind(anyData).get
</CODE></PRE>
<P>If you have a request available in the scope, you can bind directly to it 
from the request content:</P>
<PRE><CODE class="scala">val (user, password) = loginForm.bindFromRequest.get
</CODE></PRE>
<H2>Constructing complex objects</H2>
<P>A form can use functions to construct and deconstruct the value. So you can, 
for example, define a form that wraps an existing case class:</P>
<PRE><CODE class="scala">import play.api.data._
import play.api.data.Forms._

case class User(name: String, age: Int)

val userForm = Form(
  mapping(
    "name" -&gt; text,
    "age" -&gt; number
  )(User.apply)(User.unapply)
)

val anyData = Map("email" -&gt; "bob@gmail.com", "age" -&gt; "18")
val user: User = userForm.bind(anyData).get
</CODE></PRE>
<BLOCKQUOTE>
  <P><STRONG>Note:</STRONG> The difference between using <CODE>tuple</CODE> and 
  <CODE>mapping</CODE> is that when you are using <CODE>tuple</CODE> the 
  construction and deconstruction functions don’t need to be specified (we know 
  how to construct and deconstruct a tuple, right?). </P>
  <P>The <CODE>mapping</CODE> method just let you define your custom functions. 
  When you want to construct and deconstruct a case class, you can just use its 
  default <CODE>apply</CODE> and <CODE>unapply</CODE> functions, as they do 
  exactly that!</P></BLOCKQUOTE>
<P>Of course often the <CODE>Form</CODE> signature doesn’t match the case class 
exactly. Let’s use the example a form that contains an additional checkbox 
field, used to accept terms of service. We don’t need to add this data to our 
<CODE>User</CODE> value. It’s just a dummy field that is used for form 
validation but which doesn’t carry any useful information once validated.</P>
<P>As we can define our own construction and deconstruction functions, it is 
easy to handle it:</P>
<PRE><CODE class="scala">val userForm = Form(
  mapping(
    "name" -&gt; text,
    "age" -&gt; number,
    "accept" -&gt; checked("Please accept the terms and conditions")
  )( 
    (name, age, _) =&gt; User(name, age),
    (user: User) =&gt; Some(user.name, user.age, false)
  )
)
</CODE></PRE>
<BLOCKQUOTE>
  <P><STRONG>Note:</STRONG> The deconstruction function is used when we fill a 
  form with an existing <CODE>User</CODE> value. This is useful if we want the 
  load a user from the database and prepare a form to update it.</P></BLOCKQUOTE>
<H2>Defining constraints</H2>
<P>For each mapping, you can also define additional validation constraints that 
will be checked during the binding phase:</P>
<PRE><CODE class="scala">import play.api.data._
import play.api.data.Forms._
import play.api.data.validation.Constraints._

case class User(name: String, age: Int)

val userForm = Form(
  mapping(
    "name" -&gt; text verifying(required),
    "age" -&gt; number verifying(min(0), max(100))
  )(User.apply)(User.unapply)
)
</CODE></PRE>
<BLOCKQUOTE>
  <P><STRONG>Note:</STRONG> That can be also written:</P>
<PRE><CODE class="scala">mapping(
  "name" -&gt; nonEmptyText,
  "age" -&gt; number(min=0, max=100)
)
</CODE></PRE>
  <P>This constructs the same mappings, with additional 
constraints.</P></BLOCKQUOTE>
<P>You can also define ad-hoc constraints on the fields:</P>
<PRE><CODE class="scala">val loginForm = Form(
  tuple(
    "email" -&gt; nonEmptyText,
    "password" -&gt; text
  ) verifying("Invalid user name or password", { 
      case (e, p) =&gt; User.authenticate(e,p).isDefined 
  })
)
</CODE></PRE>
<H2>Handling binding failure</H2>
<P>If you can define constraints, then you need to be able to handle the binding 
errors. You can use the <CODE>fold</CODE> operation for this:</P>
<PRE><CODE class="scala">loginForm.bindFromRequest.fold(
  formWithErrors =&gt; // binding failure, you retrieve the form containing errors,
  value =&gt; // binding success, you get the actual value 
)
</CODE></PRE>
<H2>Fill a form with initial default values</H2>
<P>Sometimes you’ll want to populate a form with existing values, typically for 
editing data:</P>
<PRE><CODE class="scala">val filledForm = userForm.fill(User("Bob", 18))
</CODE></PRE>
<H2>Nested values</H2>
<P>A form mapping can define nested values:</P>
<PRE><CODE class="scala">case class User(name: String, address: Address)
case class Address(street: String, city: String)

val userForm = Form(
  mapping(
    "name" -&gt; text,
    "address" -&gt; mapping(
        "street" -&gt; text,
        "city" -&gt; text
    )(Address.apply)(Address.unapply)
  )(User.apply, User.unapply)
)
</CODE></PRE>
<P>When you are using nested data this way, the form values sent by the browser 
must be named like <CODE>address.street</CODE>, <CODE>address.city</CODE>, 
etc.</P>
<H2>Repeated values</H2>
<P>A form mapping can also define repeated values:</P>
<PRE><CODE class="scala">case class User(name: String, emails: List[String])

val userForm = Form(
  mapping(
    "name" -&gt; text,
    "emails" -&gt; list(text)
  )(User.apply, User.unapply)
)
</CODE></PRE>
<P>When you are using repeated data like this, the form values sent by the 
browser must be named <CODE>emails[0]</CODE>, <CODE>emails[1]</CODE>, 
<CODE>emails[2]</CODE>, etc.</P>
<H2>Optional values</H2>
<P>A form mapping can also define optional values:</P>
<PRE><CODE class="scala">case class User(name: String, email: Option[String])

val userForm = Form(
  mapping(
    "name" -&gt; text,
    "email" -&gt; optional(text)
  )(User.apply, User.unapply)
)
</CODE></PRE>
<BLOCKQUOTE>
  <P><STRONG>Note:</STRONG> The email field will be ignored and set to 
  <CODE>None</CODE> if the field <CODE>email</CODE> is missing in the request 
  payload or if it contains a blank value.</P></BLOCKQUOTE>
<P>Now you can mix optional, nested and repeated mappings any way you want to 
create complex forms.</P>
<BLOCKQUOTE>
  <P><STRONG>Next:</STRONG> <A href="http://www.playframework.com/documentation/2.0/ScalaFormHelpers">Using 
  the form template helpers </A></P></BLOCKQUOTE></ARTICLE><ASIDE>
<H3>HTTP form</H3>
<UL>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaForms">Form 
  definitions </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaFormHelpers">Using 
  the form template helpers </A></LI></UL>
<H3>Main concepts</H3>
<UL>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaActions">HTTP 
  programming </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaAsync">Asynchronous 
  HTTP programming </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaTemplates">The 
  template engine </A></LI>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaForms">HTTP 
  form submission and validation </A></LI>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaJson">Working 
  with JSON </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaXmlRequests">Working 
  with XML </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaFileUpload">Handling 
  file upload </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaDatabase">Accessing 
  an SQL database </A></LI>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaCache">Using 
  the Cache </A></LI>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaWS">Calling 
  WebServices </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaAkka">Integrating 
  with Akka </A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaI18N">Internationalization 
  </A></LI>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaGlobal">The 
  application Global object </A></LI>
  <LI><A href="http://www.playframework.com/documentation/2.0/ScalaTest">Testing 
  your application </A></LI></UL>
<H3>Advanced topics</H3>
<UL>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/Iteratees">Handling data 
  streams reactively </A></LI></UL>
<H3>Tutorials</H3>
<UL>
  <LI><A 
  href="http://www.playframework.com/documentation/2.0/ScalaTodoList">Your first 
  application </A></LI></UL>
<H3>Books</H3>
<P><A title="Play for Scala" href="http://bit.ly/playscala"><IMG src="ScalaForms_files/play-for-scala-cover.jpg"></A></P>
<P><A title="Play for Java" href="http://bit.ly/playjava"><IMG src="ScalaForms_files/play-for-java-cover.jpg"></A></P></ASIDE>
<STYLE type="text/css">
        @import "http://twitter.github.com/bootstrap/assets/js/google-code-prettify/prettify.css";
        </STYLE>
         
<SCRIPT type="text/javascript">
            // On start, check if flex mod is enabled
            if (localStorage && localStorage['flex'] == "true" ) document.body.className += " flex"
        </SCRIPT>
     </SECTION><FOOTER>
<DIV id="support"><ARTICLE class="community">
<H3>Community support</H3>
<UL>
  <LI><A href="http://groups.google.com/forum/#!forum/play-framework">Mailing 
  list</A></LI>
  <LI><A 
  href="http://stackoverflow.com/questions/tagged/playframework">Stackoverflow</A></LI></UL></ARTICLE><ARTICLE 
class="professional">
<H3>Professional support</H3>
<UL>
  <LI><A href="http://typesafe.com/how/subscription">Typesafe 
  Subscription</A></LI>
  <LI><A href="http://typesafe.com/how/training">Training</A></LI>
  <LI><A 
href="http://typesafe.com/how/consulting">Consulting</A></LI></UL></ARTICLE></DIV>
<DIV class="wrapper">
<DIV>
<H3>Play Framework</H3>
<UL>
  <LI><A href="http://www.playframework.com/download">Download</A></LI>
  <LI><A 
  href="http://www.playframework.com/documentation/2.1.1/JavaTodoList">Java 
  Start</A> | <A href="http://www.playframework.com/documentation/2.1.1/ScalaTodoList">Scala 
  Start</A></LI>
  <LI><A 
href="http://www.playframework.com/documentation">Documentation</A></LI></UL></DIV>
<DIV>
<H3>Community links</H3>
<UL>
  <LI><A href="http://www.eventbrite.com/directory/?q=play+framework&amp;loc=Worldwide">Events 
  <EM>via Eventbrite</EM></A></LI>
  <LI><A href="http://www.indeed.com/jobs?q=%22play+framework%22&amp;l=">Jobs 
  <EM>via Indeed</EM></A></LI>
  <LI><A href="http://www.scoop.it/playframework">Blogs <EM>via 
  Scoop.it</EM></A></LI></UL></DIV>
<DIV>
<H3>Code &amp; contribution</H3>
<UL>
  <LI><A href="http://www.playframework.com/code">Code &amp; 
  contributors</A></LI>
  <LI><A href="https://github.com/playframework/playframework/issues">Bug 
  tracker <EM>GitHub</EM></A></LI>
  <LI><A href="http://www.playframework.com/get-involved">Get 
involved</A></LI></UL></DIV>
<DIV>
<H3>Social networks</H3>
<UL>
  <LI><A href="http://twitter.com/playframework"><SPAN>Twitter</SPAN></A></LI>
  <LI><A 
  href="http://plus.google.com/106233335814246022600"><SPAN>Google+</SPAN></A></LI>
  <LI><A 
  href="http://www.facebook.com/pages/Play-Framework/50884087887"><SPAN>Facebook</SPAN></A></LI></UL></DIV></DIV>
<DIV class="credits"><A class="logo" href="http://www.playframework.com/"><IMG 
src="ScalaForms_files/soft-logo.png"></A>                 <A class="partner" 
href="http://typesafe.com/"><IMG src="ScalaForms_files/typesafe.png"></A>        
         <A class="partner" href="http://zenexity.fr/"><IMG src="ScalaForms_files/zenexity.png"></A> 
                
<P>                    Play Framework is released under the Apache 2 License     
            </P></DIV></FOOTER>
<SCRIPT src="ScalaForms_files/2.3.htm" type="text/javascript" charset="utf-8"></SCRIPT>
 
<SCRIPT type="text/javascript">
  $(function(){
    $("pre").addClass("prettyprint scala")
    window.prettyPrint && prettyPrint()
  });
</SCRIPT>
</BODY></HTML>
